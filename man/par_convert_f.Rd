% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_process.R
\name{par_convert_f}
\alias{par_convert_f}
\title{Map arguments to the desired names}
\usage{
par_convert_f(fun, arg_map)
}
\arguments{
\item{fun}{A function to map arguments.}

\item{arg_map}{named character vector.
\code{c(x = "a", y = "i")} will map \code{a} and \code{i} in \code{fun} to
\code{x} and \code{y}, respectively.}
}
\value{
Function with arguments mapped.
}
\description{
This function maps the arguments of a target function
to the desired names. Users will use a named list \code{name_match} to
standardize the argument names, at least x and y, to the target function.
This function is particularly useful to parallelize functions for spatial
data outside \code{sf} and \code{terra} packages that do not have arguments
named x and/or y. \verb{par_*} functions could detect such functions by
wrapping nonstandardized functions to parallelize the computation.
}
\note{
\code{arg_map} should be defined carefully according to the characteristics
of \code{fun}. After mapping \code{x} and \code{y}, the resultant function will fail
if there remain arguments without default. It is recommended to map all
the arguments in \code{fun} to avoid any side effects.
}
\examples{
cov_map <- arg_mapping <- c(x = "a", y = "b", z = "c", w = "d")
# Example original function
f1 <- function(a, b, c, d) {
  return(a + b + c + d)
}
# Mapping of new argument names to original argument names
arg_mapping <- c(x = "a", y = "b", z = "c", w = "d")
f2 <- par_convert_f(f1, arg_mapping)

# demonstrate f2 with the mapped arguments
f2(x = 1, y = 2, z = -1, w = 10)
}
